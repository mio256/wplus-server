// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: employees.sql

package rdb

import (
	"context"
)

const createEmployee = `-- name: CreateEmployee :one
insert into employees (name, workplace_id) values ($1, $2) returning id, name, workplace_id, deleted_at, created_at, updated_at
`

type CreateEmployeeParams struct {
	Name        string `json:"name"`
	WorkplaceID int64  `json:"workplace_id"`
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (Employee, error) {
	row := q.db.QueryRow(ctx, createEmployee, arg.Name, arg.WorkplaceID)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.WorkplaceID,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const softDeleteEmployee = `-- name: SoftDeleteEmployee :exec
update employees set deleted_at = now() where id = $1
`

func (q *Queries) SoftDeleteEmployee(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, softDeleteEmployee, id)
	return err
}
