// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: for_load.sql

package rdb

import (
	"context"
)

const loadCreateUser = `-- name: LoadCreateUser :one
insert into users (id, office_id, name, password, role)
select $1, $2, $3, $4, $5 where not exists (
    select 1 from users where id = $1
)
returning id, office_id, name, password, role, created_at, updated_at
`

type LoadCreateUserParams struct {
	ID       int64    `json:"id"`
	OfficeID int64    `json:"office_id"`
	Name     string   `json:"name"`
	Password string   `json:"password"`
	Role     UserType `json:"role"`
}

func (q *Queries) LoadCreateUser(ctx context.Context, arg LoadCreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, loadCreateUser,
		arg.ID,
		arg.OfficeID,
		arg.Name,
		arg.Password,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OfficeID,
		&i.Name,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
