// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: for_test.sql

package rdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const ping = `-- name: Ping :exec
select 1
`

func (q *Queries) Ping(ctx context.Context) error {
	_, err := q.db.Exec(ctx, ping)
	return err
}

const testCreateEmployee = `-- name: TestCreateEmployee :one
insert into employees (name, workplace_id) values ($1, $2) returning id, name, workplace_id, deleted_at, created_at, updated_at
`

type TestCreateEmployeeParams struct {
	Name        string `json:"name"`
	WorkplaceID int64  `json:"workplace_id"`
}

func (q *Queries) TestCreateEmployee(ctx context.Context, arg TestCreateEmployeeParams) (Employee, error) {
	row := q.db.QueryRow(ctx, testCreateEmployee, arg.Name, arg.WorkplaceID)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.WorkplaceID,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const testCreateOffice = `-- name: TestCreateOffice :one
insert into offices (name) values ($1) returning id, name, deleted_at, created_at, updated_at
`

func (q *Queries) TestCreateOffice(ctx context.Context, name string) (Office, error) {
	row := q.db.QueryRow(ctx, testCreateOffice, name)
	var i Office
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const testCreateUser = `-- name: TestCreateUser :one
insert into users (id, office_id, name, password, role, employee_id) values ($1, $2, $3, $4, $5, $6) returning id, office_id, name, password, role, employee_id, created_at, updated_at
`

type TestCreateUserParams struct {
	ID         int64       `json:"id"`
	OfficeID   int64       `json:"office_id"`
	Name       string      `json:"name"`
	Password   string      `json:"password"`
	Role       UserType    `json:"role"`
	EmployeeID pgtype.Int8 `json:"employee_id"`
}

func (q *Queries) TestCreateUser(ctx context.Context, arg TestCreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, testCreateUser,
		arg.ID,
		arg.OfficeID,
		arg.Name,
		arg.Password,
		arg.Role,
		arg.EmployeeID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OfficeID,
		&i.Name,
		&i.Password,
		&i.Role,
		&i.EmployeeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const testCreateWorkEntry = `-- name: TestCreateWorkEntry :one
insert into work_entries (employee_id, workplace_id, date, hours, start_time, end_time, attendance, comment)
values ($1, $2, $3, $4, $5, $6, $7, $8)
returning id, employee_id, workplace_id, date, hours, start_time, end_time, attendance, comment, deleted_at, created_at, updated_at
`

type TestCreateWorkEntryParams struct {
	EmployeeID  int64       `json:"employee_id"`
	WorkplaceID int64       `json:"workplace_id"`
	Date        pgtype.Date `json:"date"`
	Hours       pgtype.Int2 `json:"hours"`
	StartTime   pgtype.Time `json:"start_time"`
	EndTime     pgtype.Time `json:"end_time"`
	Attendance  pgtype.Bool `json:"attendance"`
	Comment     pgtype.Text `json:"comment"`
}

func (q *Queries) TestCreateWorkEntry(ctx context.Context, arg TestCreateWorkEntryParams) (WorkEntry, error) {
	row := q.db.QueryRow(ctx, testCreateWorkEntry,
		arg.EmployeeID,
		arg.WorkplaceID,
		arg.Date,
		arg.Hours,
		arg.StartTime,
		arg.EndTime,
		arg.Attendance,
		arg.Comment,
	)
	var i WorkEntry
	err := row.Scan(
		&i.ID,
		&i.EmployeeID,
		&i.WorkplaceID,
		&i.Date,
		&i.Hours,
		&i.StartTime,
		&i.EndTime,
		&i.Attendance,
		&i.Comment,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const testCreateWorkplace = `-- name: TestCreateWorkplace :one
insert into workplaces (name, office_id, work_type)
values ($1, $2, $3)
returning id, name, office_id, work_type, deleted_at, created_at, updated_at
`

type TestCreateWorkplaceParams struct {
	Name     string   `json:"name"`
	OfficeID int64    `json:"office_id"`
	WorkType WorkType `json:"work_type"`
}

func (q *Queries) TestCreateWorkplace(ctx context.Context, arg TestCreateWorkplaceParams) (Workplace, error) {
	row := q.db.QueryRow(ctx, testCreateWorkplace, arg.Name, arg.OfficeID, arg.WorkType)
	var i Workplace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OfficeID,
		&i.WorkType,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const testDeleteEmployee = `-- name: TestDeleteEmployee :exec
delete from employees where id = $1
`

func (q *Queries) TestDeleteEmployee(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, testDeleteEmployee, id)
	return err
}

const testDeleteOffice = `-- name: TestDeleteOffice :exec
delete from offices where id = $1
`

func (q *Queries) TestDeleteOffice(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, testDeleteOffice, id)
	return err
}

const testDeleteUser = `-- name: TestDeleteUser :exec
delete from users where id = $1
`

func (q *Queries) TestDeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, testDeleteUser, id)
	return err
}

const testDeleteWorkEntry = `-- name: TestDeleteWorkEntry :exec
delete from work_entries where id = $1
`

func (q *Queries) TestDeleteWorkEntry(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, testDeleteWorkEntry, id)
	return err
}

const testDeleteWorkplace = `-- name: TestDeleteWorkplace :exec
delete from workplaces where id = $1
`

func (q *Queries) TestDeleteWorkplace(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, testDeleteWorkplace, id)
	return err
}

const testGetDeletedAtEmployee = `-- name: TestGetDeletedAtEmployee :one
select deleted_at from employees where id = $1
`

func (q *Queries) TestGetDeletedAtEmployee(ctx context.Context, id int64) (pgtype.Timestamp, error) {
	row := q.db.QueryRow(ctx, testGetDeletedAtEmployee, id)
	var deleted_at pgtype.Timestamp
	err := row.Scan(&deleted_at)
	return deleted_at, err
}

const testGetDeletedAtOffice = `-- name: TestGetDeletedAtOffice :one
select deleted_at from offices where id = $1
`

func (q *Queries) TestGetDeletedAtOffice(ctx context.Context, id int64) (pgtype.Timestamp, error) {
	row := q.db.QueryRow(ctx, testGetDeletedAtOffice, id)
	var deleted_at pgtype.Timestamp
	err := row.Scan(&deleted_at)
	return deleted_at, err
}

const testGetDeletedAtWorkEntry = `-- name: TestGetDeletedAtWorkEntry :one
select deleted_at from work_entries where id = $1
`

func (q *Queries) TestGetDeletedAtWorkEntry(ctx context.Context, id int64) (pgtype.Timestamp, error) {
	row := q.db.QueryRow(ctx, testGetDeletedAtWorkEntry, id)
	var deleted_at pgtype.Timestamp
	err := row.Scan(&deleted_at)
	return deleted_at, err
}

const testGetDeletedAtWorkplace = `-- name: TestGetDeletedAtWorkplace :one
select deleted_at from workplaces where id = $1
`

func (q *Queries) TestGetDeletedAtWorkplace(ctx context.Context, id int64) (pgtype.Timestamp, error) {
	row := q.db.QueryRow(ctx, testGetDeletedAtWorkplace, id)
	var deleted_at pgtype.Timestamp
	err := row.Scan(&deleted_at)
	return deleted_at, err
}

const testGetEmployee = `-- name: TestGetEmployee :one
select id, name, workplace_id, deleted_at, created_at, updated_at from employees where id = $1 and deleted_at is null
`

func (q *Queries) TestGetEmployee(ctx context.Context, id int64) (Employee, error) {
	row := q.db.QueryRow(ctx, testGetEmployee, id)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.WorkplaceID,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
