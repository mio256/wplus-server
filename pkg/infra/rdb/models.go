// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package rdb

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type UserType string

const (
	UserTypeEmployee UserType = "employee"
	UserTypeManager  UserType = "manager"
	UserTypeAdmin    UserType = "admin"
)

func (e *UserType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserType(s)
	case string:
		*e = UserType(s)
	default:
		return fmt.Errorf("unsupported scan type for UserType: %T", src)
	}
	return nil
}

type NullUserType struct {
	UserType UserType `json:"user_type"`
	Valid    bool     `json:"valid"` // Valid is true if UserType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserType) Scan(value interface{}) error {
	if value == nil {
		ns.UserType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserType), nil
}

type WorkType string

const (
	WorkTypeHours      WorkType = "hours"
	WorkTypeTime       WorkType = "time"
	WorkTypeAttendance WorkType = "attendance"
)

func (e *WorkType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = WorkType(s)
	case string:
		*e = WorkType(s)
	default:
		return fmt.Errorf("unsupported scan type for WorkType: %T", src)
	}
	return nil
}

type NullWorkType struct {
	WorkType WorkType `json:"work_type"`
	Valid    bool     `json:"valid"` // Valid is true if WorkType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullWorkType) Scan(value interface{}) error {
	if value == nil {
		ns.WorkType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.WorkType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullWorkType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.WorkType), nil
}

type Employee struct {
	ID          int64            `json:"id"`
	Name        string           `json:"name"`
	WorkplaceID int64            `json:"workplace_id"`
	DeletedAt   pgtype.Timestamp `json:"deleted_at"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
}

type Office struct {
	ID        int64            `json:"id"`
	Name      string           `json:"name"`
	DeletedAt pgtype.Timestamp `json:"deleted_at"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

type User struct {
	ID         int64            `json:"id"`
	OfficeID   int64            `json:"office_id"`
	Name       string           `json:"name"`
	Password   string           `json:"password"`
	Role       UserType         `json:"role"`
	EmployeeID pgtype.Int8      `json:"employee_id"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
}

type WorkEntry struct {
	ID          int64            `json:"id"`
	EmployeeID  int64            `json:"employee_id"`
	WorkplaceID int64            `json:"workplace_id"`
	Date        pgtype.Date      `json:"date"`
	Hours       pgtype.Int2      `json:"hours"`
	StartTime   pgtype.Time      `json:"start_time"`
	EndTime     pgtype.Time      `json:"end_time"`
	Attendance  pgtype.Bool      `json:"attendance"`
	Comment     pgtype.Text      `json:"comment"`
	DeletedAt   pgtype.Timestamp `json:"deleted_at"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
}

type Workplace struct {
	ID        int64            `json:"id"`
	Name      string           `json:"name"`
	OfficeID  int64            `json:"office_id"`
	WorkType  WorkType         `json:"work_type"`
	DeletedAt pgtype.Timestamp `json:"deleted_at"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}
