// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: workplaces.sql

package rdb

import (
	"context"
)

const createWorkplace = `-- name: CreateWorkplace :one
insert into workplaces (name, office_id, work_type)
values ($1, $2, $3)
returning id, name, office_id, work_type, deleted_at, created_at, updated_at
`

type CreateWorkplaceParams struct {
	Name     string   `json:"name"`
	OfficeID int64    `json:"office_id"`
	WorkType WorkType `json:"work_type"`
}

func (q *Queries) CreateWorkplace(ctx context.Context, arg CreateWorkplaceParams) (Workplace, error) {
	row := q.db.QueryRow(ctx, createWorkplace, arg.Name, arg.OfficeID, arg.WorkType)
	var i Workplace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OfficeID,
		&i.WorkType,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWorkplace = `-- name: GetWorkplace :one
select id, name, office_id, work_type, deleted_at, created_at, updated_at from workplaces where id = $1 and deleted_at is null
`

func (q *Queries) GetWorkplace(ctx context.Context, id int64) (Workplace, error) {
	row := q.db.QueryRow(ctx, getWorkplace, id)
	var i Workplace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OfficeID,
		&i.WorkType,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWorkplaces = `-- name: GetWorkplaces :many
select id, name, office_id, work_type, deleted_at, created_at, updated_at from workplaces where office_id = $1 and deleted_at is null
`

func (q *Queries) GetWorkplaces(ctx context.Context, officeID int64) ([]Workplace, error) {
	rows, err := q.db.Query(ctx, getWorkplaces, officeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workplace
	for rows.Next() {
		var i Workplace
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OfficeID,
			&i.WorkType,
			&i.DeletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteWorkplace = `-- name: SoftDeleteWorkplace :exec
update workplaces set deleted_at = now() where id = $1
`

func (q *Queries) SoftDeleteWorkplace(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, softDeleteWorkplace, id)
	return err
}
