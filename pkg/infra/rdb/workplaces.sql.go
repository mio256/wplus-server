// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: workplaces.sql

package rdb

import (
	"context"
)

const createWorkplace = `-- name: CreateWorkplace :one
insert into workplaces (name, office_id, work_type)
values ($1, $2, $3)
returning id, name, office_id, work_type, deleted_at, created_at, updated_at
`

type CreateWorkplaceParams struct {
	Name     string   `json:"name"`
	OfficeID int64    `json:"office_id"`
	WorkType WorkType `json:"work_type"`
}

func (q *Queries) CreateWorkplace(ctx context.Context, arg CreateWorkplaceParams) (Workplace, error) {
	row := q.db.QueryRow(ctx, createWorkplace, arg.Name, arg.OfficeID, arg.WorkType)
	var i Workplace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OfficeID,
		&i.WorkType,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const softDeleteWorkplace = `-- name: SoftDeleteWorkplace :exec
update workplaces set deleted_at = now() where id = $1
`

func (q *Queries) SoftDeleteWorkplace(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, softDeleteWorkplace, id)
	return err
}
