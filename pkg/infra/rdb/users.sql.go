// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package rdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
WITH MaxId AS (
    SELECT COALESCE(MAX(id), 0) AS max_id
    FROM users
    WHERE office_id = $1
),
NewId AS (
    SELECT max_id + 1 AS new_id
    FROM MaxId
)
INSERT INTO users (id, office_id, name, password, role, employee_id)
VALUES (
    (SELECT new_id FROM NewId),
    $1, $2, $3, $4, $5
)
RETURNING id, office_id, name, password, role, employee_id, created_at, updated_at
`

type CreateUserParams struct {
	OfficeID   int64       `json:"office_id"`
	Name       string      `json:"name"`
	Password   string      `json:"password"`
	Role       UserType    `json:"role"`
	EmployeeID pgtype.Int8 `json:"employee_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.OfficeID,
		arg.Name,
		arg.Password,
		arg.Role,
		arg.EmployeeID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OfficeID,
		&i.Name,
		&i.Password,
		&i.Role,
		&i.EmployeeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
select id, office_id, name, password, role, employee_id, created_at, updated_at from users where id = $1 and office_id = $2
`

type GetUserParams struct {
	ID       int64 `json:"id"`
	OfficeID int64 `json:"office_id"`
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (User, error) {
	row := q.db.QueryRow(ctx, getUser, arg.ID, arg.OfficeID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OfficeID,
		&i.Name,
		&i.Password,
		&i.Role,
		&i.EmployeeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
